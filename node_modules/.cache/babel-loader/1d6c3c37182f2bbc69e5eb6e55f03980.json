{"ast":null,"code":"'use strict';\n\nvar reflectGetProto = require('./Reflect.getPrototypeOf');\nvar originalGetProto = require('./Object.getPrototypeOf');\nvar getDunderProto = require('dunder-proto/get');\n\n/** @type {import('.')} */\nmodule.exports = reflectGetProto ? function getProto(O) {\n  // @ts-expect-error TS can't narrow inside a closure, for some reason\n  return reflectGetProto(O);\n} : originalGetProto ? function getProto(O) {\n  if (!O || typeof O !== 'object' && typeof O !== 'function') {\n    throw new TypeError('getProto: not an object');\n  }\n  // @ts-expect-error TS can't narrow inside a closure, for some reason\n  return originalGetProto(O);\n} : getDunderProto ? function getProto(O) {\n  // @ts-expect-error TS can't narrow inside a closure, for some reason\n  return getDunderProto(O);\n} : null;","map":null,"metadata":{},"sourceType":"script"}